// Code your design for multiplier by using 3bit fulladder and 

//using of fulladder
module full_adder(a,b,cin,s,ca);
  
  input a,b,cin;
  output s,ca;
  
  wire w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12;
  
  //define not gate 
  
  not n1(w1,a);
  not n2(w2,b);
  not n3(w3,cin);
  
  //desing and gates for sum 
  
  and a1(w4, w1,w2,cin);
  and a2(w5, w1,b,w3);
  and a3(w6, a,w2,w3);
  and a4(w7, a,b,cin);
  
  //desing and gate for carry
  
  and a5(w8,w1,b,cin);
  and a6(w9,a,w2,cin);
  and a7(w10,a,b,w3);
  
  //deging or gate for sum 
  
  or sum(w11,w4,w5,w6,w7);
  
  //design or gate for carry
  
  or carry(w12,w7,w8,w9,w10);
  
  assign s=w11;
  assign ca=w12;
  
endmodule
  
//using of 3bit fulladder
module fulladder3bit(x, y, carry_in, result, cout);
  
  output [2:0] result;
  output cout;
  input [2:0] x, y;
  input carry_in;
  
  wire c1, c2;
  
  
  full_adder f1(x[0], y[0], carry_in, result[0], c1);
  full_adder f2(x[1], y[1], c1, result[1], c2);
  full_adder f3(x[2], y[2], c2, result[2], cout);
  
endmodule

// design 

module multiplier(a,b,p);
  
  input [2:0] a,b;
  output [5:0] p;
  wire [10:0] w;
  
  //design and gate
  and a1(p[0], a[0],b[0]);
  and a2(w[0], a[1],b[0]);
  and a3(w[1], a[2],b[0]);
  
  and a4(w[2], a[0],b[1]);
  and a5(w[3], a[1],b[1]);
  and a6(w[4], a[2],b[1]);
  
  and a7(w[8], a[0],b[2]);
  and a8(w[9], a[1],b[2]);
  and a9(w[10], a[2],b[2]);
  
  // design for full 
  
  // here i use concatinatio to add two vector 
  
  fulladder3bit f31(w[4:2], {1'b0, w[1:0]}, 1'b0, {w[6:5], p[1]}, w[7]);
  fulladder3bit f32(w[10:8], w[7:5], 1'b0, p[4:2], p[5]);
  
endmodule
  
  
